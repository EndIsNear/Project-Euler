// Work out the first ten digits of the sum of the following one-hundred 50-digit numbers.


#include <iostream>
using namespace std;

const short int MAX = 55;

class LongNum
{
public:
    LongNum ( const char* );
    void Print () const { for ( int i = 0 ; i < MAX ; i++ ) cout << (int) this->num[i]; cout << endl; }
    void PrintFirstTen () const;
    LongNum operator+ ( const LongNum& ) const;
private:
    char num[MAX];
};

LongNum::LongNum ( const char* num )
{
    int lenght = 0;
    const char* pnt = num;
    while ( *pnt )
    {
        ++lenght;
        ++pnt;
    }
    for ( int i = 0 ; i < MAX - lenght ; i++ )
        this->num[i] = 0 ;

    for ( int i = MAX - lenght ; i < MAX ; i++ )
        this->num[i] = num[i - ( MAX - lenght )] - '0';
}

void LongNum::PrintFirstTen() const
{
    int i = 0;
    for (; i < MAX ; i++ )
        if ( this->num[i] != 0 )
            break;
    for( int j = i ; j < 10 + i && j < MAX ; j++ )
        cout << (int)this->num[j];
    cout << endl;
}

LongNum LongNum::operator+ ( const LongNum& num2 ) const
{
    char tmp[MAX+1];
    tmp[MAX+1] = '\0';
    int tmpDigit = 0;
    for ( int i = MAX - 1 ; i >= 0 ; --i )
    {
        tmp[i] = this->num[i] + num2.num[i] + tmpDigit;
        tmpDigit = ( tmp[i] )/10;
        tmp[i] %= 10;
    }
    for ( int i = 0 ; i < MAX ; i++ )
        tmp[i] += '0';
    return LongNum ( tmp );
}

int main ()
{
    LongNum* num[100];
    num[0] = new LongNum ( "37107287533902102798797998220837590246510135740250" );
    num[1] = new LongNum ( "46376937677490009712648124896970078050417018260538" );
    num[2] = new LongNum ( "74324986199524741059474233309513058123726617309629" );
    num[3] = new LongNum ( "91942213363574161572522430563301811072406154908250" );
    num[4] = new LongNum ( "23067588207539346171171980310421047513778063246676" );
    num[5] = new LongNum ( "89261670696623633820136378418383684178734361726757" );
    num[6] = new LongNum ( "28112879812849979408065481931592621691275889832738" );
    num[7] = new LongNum ( "44274228917432520321923589422876796487670272189318" );
    num[8] = new LongNum ( "47451445736001306439091167216856844588711603153276" );
    num[9] = new LongNum ( "70386486105843025439939619828917593665686757934951" );
    num[10] = new LongNum ( "62176457141856560629502157223196586755079324193331" );
    num[11] = new LongNum ( "64906352462741904929101432445813822663347944758178" );
    num[12] = new LongNum ( "92575867718337217661963751590579239728245598838407" );
    num[13] = new LongNum ( "58203565325359399008402633568948830189458628227828" );
    num[14] = new LongNum ( "80181199384826282014278194139940567587151170094390" );
    num[15] = new LongNum ( "35398664372827112653829987240784473053190104293586" );
    num[16] = new LongNum ( "86515506006295864861532075273371959191420517255829" );
    num[17] = new LongNum ( "71693888707715466499115593487603532921714970056938" );
    num[18] = new LongNum ( "54370070576826684624621495650076471787294438377604" );
    num[19] = new LongNum ( "53282654108756828443191190634694037855217779295145" );
    num[20] = new LongNum ( "36123272525000296071075082563815656710885258350721" );
    num[21] = new LongNum ( "45876576172410976447339110607218265236877223636045" );
    num[22] = new LongNum ( "17423706905851860660448207621209813287860733969412" );
    num[23] = new LongNum ( "81142660418086830619328460811191061556940512689692" );
    num[24] = new LongNum ( "51934325451728388641918047049293215058642563049483" );
    num[25] = new LongNum ( "62467221648435076201727918039944693004732956340691" );
    num[26] = new LongNum ( "15732444386908125794514089057706229429197107928209" );
    num[27] = new LongNum ( "55037687525678773091862540744969844508330393682126" );
    num[28] = new LongNum ( "18336384825330154686196124348767681297534375946515" );
    num[29] = new LongNum ( "80386287592878490201521685554828717201219257766954" );
    num[30] = new LongNum ( "78182833757993103614740356856449095527097864797581" );
    num[31] = new LongNum ( "16726320100436897842553539920931837441497806860984" );
    num[32] = new LongNum ( "48403098129077791799088218795327364475675590848030" );
    num[33] = new LongNum ( "87086987551392711854517078544161852424320693150332" );
    num[34] = new LongNum ( "59959406895756536782107074926966537676326235447210" );
    num[35] = new LongNum ( "69793950679652694742597709739166693763042633987085" );
    num[36] = new LongNum ( "41052684708299085211399427365734116182760315001271" );
    num[37] = new LongNum ( "65378607361501080857009149939512557028198746004375" );
    num[38] = new LongNum ( "35829035317434717326932123578154982629742552737307" );
    num[39] = new LongNum ( "94953759765105305946966067683156574377167401875275" );
    num[40] = new LongNum ( "88902802571733229619176668713819931811048770190271" );
    num[41] = new LongNum ( "25267680276078003013678680992525463401061632866526" );
    num[42] = new LongNum ( "36270218540497705585629946580636237993140746255962" );
    num[43] = new LongNum ( "24074486908231174977792365466257246923322810917141" );
    num[44] = new LongNum ( "91430288197103288597806669760892938638285025333403" );
    num[45] = new LongNum ( "34413065578016127815921815005561868836468420090470" );
    num[46] = new LongNum ( "23053081172816430487623791969842487255036638784583" );
    num[47] = new LongNum ( "11487696932154902810424020138335124462181441773470" );
    num[48] = new LongNum ( "63783299490636259666498587618221225225512486764533" );
    num[49] = new LongNum ( "67720186971698544312419572409913959008952310058822" );
    num[50] = new LongNum ( "95548255300263520781532296796249481641953868218774" );
    num[51] = new LongNum ( "76085327132285723110424803456124867697064507995236" );
    num[52] = new LongNum ( "37774242535411291684276865538926205024910326572967" );
    num[53] = new LongNum ( "23701913275725675285653248258265463092207058596522" );
    num[54] = new LongNum ( "29798860272258331913126375147341994889534765745501" );
    num[55] = new LongNum ( "18495701454879288984856827726077713721403798879715" );
    num[56] = new LongNum ( "38298203783031473527721580348144513491373226651381" );
    num[57] = new LongNum ( "34829543829199918180278916522431027392251122869539" );
    num[58] = new LongNum ( "40957953066405232632538044100059654939159879593635" );
    num[59] = new LongNum ( "29746152185502371307642255121183693803580388584903" );
    num[60] = new LongNum ( "41698116222072977186158236678424689157993532961922" );
    num[61] = new LongNum ( "62467957194401269043877107275048102390895523597457" );
    num[62] = new LongNum ( "23189706772547915061505504953922979530901129967519" );
    num[63] = new LongNum ( "86188088225875314529584099251203829009407770775672" );
    num[64] = new LongNum ( "11306739708304724483816533873502340845647058077308" );
    num[65] = new LongNum ( "82959174767140363198008187129011875491310547126581" );
    num[66] = new LongNum ( "97623331044818386269515456334926366572897563400500" );
    num[67] = new LongNum ( "42846280183517070527831839425882145521227251250327" );
    num[68] = new LongNum ( "55121603546981200581762165212827652751691296897789" );
    num[69] = new LongNum ( "32238195734329339946437501907836945765883352399886" );
    num[70] = new LongNum ( "75506164965184775180738168837861091527357929701337" );
    num[71] = new LongNum ( "62177842752192623401942399639168044983993173312731" );
    num[72] = new LongNum ( "32924185707147349566916674687634660915035914677504" );
    num[73] = new LongNum ( "99518671430235219628894890102423325116913619626622" );
    num[74] = new LongNum ( "73267460800591547471830798392868535206946944540724" );
    num[75] = new LongNum ( "76841822524674417161514036427982273348055556214818" );
    num[76] = new LongNum ( "97142617910342598647204516893989422179826088076852" );
    num[77] = new LongNum ( "87783646182799346313767754307809363333018982642090" );
    num[78] = new LongNum ( "10848802521674670883215120185883543223812876952786" );
    num[79] = new LongNum ( "71329612474782464538636993009049310363619763878039" );
    num[80] = new LongNum ( "62184073572399794223406235393808339651327408011116" );
    num[81] = new LongNum ( "66627891981488087797941876876144230030984490851411" );
    num[82] = new LongNum ( "60661826293682836764744779239180335110989069790714" );
    num[83] = new LongNum ( "85786944089552990653640447425576083659976645795096" );
    num[84] = new LongNum ( "66024396409905389607120198219976047599490197230297" );
    num[85] = new LongNum ( "64913982680032973156037120041377903785566085089252" );
    num[86] = new LongNum ( "16730939319872750275468906903707539413042652315011" );
    num[87] = new LongNum ( "94809377245048795150954100921645863754710598436791" );
    num[88] = new LongNum ( "78639167021187492431995700641917969777599028300699" );
    num[89] = new LongNum ( "15368713711936614952811305876380278410754449733078" );
    num[90] = new LongNum ( "40789923115535562561142322423255033685442488917353" );
    num[91] = new LongNum ( "44889911501440648020369068063960672322193204149535" );
    num[92] = new LongNum ( "41503128880339536053299340368006977710650566631954" );
    num[93] = new LongNum ( "81234880673210146739058568557934581403627822703280" );
    num[94] = new LongNum ( "82616570773948327592232845941706525094512325230608" );
    num[95] = new LongNum ( "22918802058777319719839450180888072429661980811197" );
    num[96] = new LongNum ( "77158542502016545090413245809786882778948721859617" );
    num[97] = new LongNum ( "72107838435069186155435662884062257473692284509516" );
    num[98] = new LongNum ( "20849603980134001723930671666823555245252804609722" );
    num[99] = new LongNum ( "53503534226472524250874054075591789781264330331690" );
    for ( int i = 0 ; i < 100 ; i++ )
        if ( num[i] == NULL )
        {
            cerr << "ERROR!" << endl;
            return -1;
        }
    LongNum sum ( "0" );
    for ( int i = 0 ; i < 100 ; i++ )
    {
        sum = sum + *num[i];
        delete num[i];
    }
    sum.PrintFirstTen();
    return 0;
}
